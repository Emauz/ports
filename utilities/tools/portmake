#!/bin/bash

# Copyright 2018, 2019 Scott Court
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

# The location of the ports tree.
PORTS_TREE=/usr/ports

# The directory to place binary packages in after building them.
PACKAGE_DIR=/opt/packages

# The file to log package builds to.
LOG_FILE=/var/log/portmake.log

# An array of the repositories to enable in the ports tree.
ENABLED_REPOSITORIES=(cucumber community)

# An array of packages to exclude when updating from the system from the ports
# tree.
EXCLUDE_PACKAGE=()

# The unprivileged user to run privilege separation tasks as. This user must
# have write access to the ports tree.
PRIVSEP_USER=portuser

# A string to prefix the build number with for all packages built in the ports
# system. Note the the `update-all` option will update packages only if their
# build prefix matches this.
BUILD_PREFIX=localport_

# Determines whether or not to automatically increment the build number when
# rebuilding a package. If this is set to true, the build number will be set to
# the current build number plus 1 if the full package name of the package being
# built is otherwise the same as the version already installed. Setting the
# BUILD environment variable supersedes this.
AUTOINCREMENT_BUILD_NUMBER=true

# Determines whether or not "old packages" (packages that have been replaced by
# a newer version) should be automatically moved to a seperate directory.
MOVE_OLD_PACKAGES=true

# If MOVE_OLD_PACKAGES is set to true, old packages will be moved to this
# directory.
OLD_PACKAGE_DIR=/opt/old_packages

# Include the config file. Do it after setting the variables so that
# customizations made in the config file take precendence.
if [ -f /etc/portmake.conf ]; then
	source /etc/portmake.conf
fi

COLOR_FAIL="\033[1;31m"
COLOR_WARN="\033[1;33m"
COLOR_PASS="\033[1;32m"
COLOR_INFO="\033[1;36m"
COLOR_NORMAL="\033[0m"

# Displays a help message.
portmake_help () {
	cat <<EOF
Usage: $0 <action> [package]

The portmake utility uses a buildscript build and install a package from source,
and optionally allows for recursively building all of a package's build time
dependencies.

The package argument is optional. If it is not included, portmake will build the
package in the current directory.

Most Useful Actions:
The following actions will likely be most useful to the average user.
install		Install a package.
update		Update an individual package.
update-all	Update the entire system.

All Supported Actions:
help		Displays this message.
build		Build the package, downloading and verifying the source if
		necessary.
build-only	Build the package only; do not download the source, verify the
		source, build dependencies or install the built package.
build-recursive	Build and install any build time dependencies. Then build the
		package, downloading and verifying the source if necessary.
check-installed	Checks if this package is already installed. Evaluates to true
		and exists with status 0 if it is; otherwise it evaulates to
		false and exits with status 1.
check-update	Checks if this package needs to be updated. If any files in the
		package's source directory have been modified since the package
		was last built, this evaluates to true and exits with status 0.
		Otherwise, it evaulates to false and exists with status 1.
download	Download the source tarballs for a package and verify their
		integrity.
download-only	Download the source tarballs and stop; do not verify their
		integrity.
download-recursive	
		Download the source tarballs for a package and verify their 
		integrity. Also recursive download and verify the source
		tarballs for any dependencies of the package.
install		Install the package by running build-recursive to build it,
		rebuilding the package if it is already installed. Additionally
		install all of its dependencies.
install-new	Install the package like the install option, but only if it is
		not already installed.
update		Update the package if it is already installed and check-update
		evaluates to true.
update-all	Update every package in the ports tree as though it had
		\`portmake update\` run on it.	
verify-only	Verify the integrity of the source tarballs and stop.

Exit Codes:
0	Success
1	Invalid arguments
2	Failed to download source
3	Failed to verify source
4	Failed to build package
5	Failed to install package
6	Invalid configuration

Influential Environment Variables:
BUILD		This variable will be appended to the end of the build number
		portion of each package built.
EOF
}

# Build the package, downloading and verifying the source if necessary.
portmake_build () {
	portmake_download_only
	portmake_verify_only
	portmake_build_only
}

# Build the package only; do not download the source, verify the source, build
# dependencies or install the built package.
portmake_build_only () {
	# Setup the OUTDIR
	if [ -e $OUTDIR ]; then
		rm -rf $OUTDIR || exit 4
	fi
	mkdir -p $OUTDIR  || exit 4
	
	# Build the package
	echo -e ${COLOR_INFO}Building ${package}${COLOR_NORMAL}
	eval OUTDIR=$OUTDIR BUILD=$PKG_BUILD $package_dir/${package}.buildscript build || exit 4

	# Autoincrement the build numbers as necessary
	if [ -z "$BUILD" ]; then
		local OWD=$PWD
		cd $OUTDIR
		for pkg in $(ls -A $OUTDIR); do
			portmake_util_autoincrement_build_if_necessary $pkg || exit 4
		done
		cd $OWD
	fi

	# Retire the old packages
	if [ $MOVE_OLD_PACKAGES = true ]; then
		portmake_util_retire_package $package || exit 4
	fi

	# Copy the package to the PACKAGE_DIR
	if [ ! -z "$PACKAGE_DIR" -a ! -z "$(ls -A $OUTDIR)" ]; then
		if [ ! -d $PACKAGE_DIR/$package_group ]; then
			mkdir -p $PACKAGE_DIR/$package_group || exit 4
		fi
		cp $OUTDIR/* $PACKAGE_DIR/$package_group/
	fi

	echo -e "$(date --rfc-3339=seconds)\tBuilt package $package_group/$package" >> $LOG_FILE
}

# Build and install any build time dependencies. Then build the package,
# downloading and verifying the source if necessary.
portmake_build_recursive () {
	# Build and install dependencies
	for dependency in $(eval $package_dir/${package}.buildscript builddeps);
	do
		# If the dependency is installed already, skip it.
		if portmake_util_is_package_installed $dependency; then
			continue
		fi

		# Otherwise, build it now
		echo -e ${COLOR_INFO}Building dependency: $dependency${COLOR_NORMAL}
		eval $0 install-new $dependency 
		stat=$?
		if [ $stat -ne 0 ]; then
			exit $stat
		fi
	done

	# Build this package
	portmake_build
}

# Utility function to check if a package is installed without exiting the
# script. Returns true (0) if the packate $1 is installed, otherwise returns
# false (1).
portmake_util_is_package_installed () {
	# Escape the package name for egrep
	local escaped_name=$(sed 's/[^[:alnum:]]/\\&/g' <<< "$1")
	if [ -z "$(ls /var/log/packages | egrep '^'"$escaped_name"'-[^-]+-[^-]+-[^-]+$')" ]; then
		return 1
	else
		return 0
	fi
}

# Utility function to "retire" the package specified by $1. It will move all
# builds of the package into the OLD_PACKAGE_DIR heirarchy.
portmake_util_retire_package () {
	# Escape the package name for egrep
	local escaped_name=$(sed 's/[^[:alnum:]]/\\&/g' <<< "$1")
	for file in $(find "$PACKAGE_DIR" -type f | egrep '/'"$escaped_name"'-[^-]+-[^-]+-[^-]+.t?z$'); do
		relpath=$(realpath "--relative-to=$PACKAGE_DIR" $file)
		reldir=$(dirname $relpath)
		mkdir -p "$OLD_PACKAGE_DIR/$reldir" || return 1
		mv "$file"* "$OLD_PACKAGE_DIR/$reldir/" || return 1
	done
}

# Utility function to check if two package names ($1 and $2) are identical with
# the exception of the build number, without exiting the script. This is used
# to determine if the build number needs to be autoincremented. Returns
# true (0) if the package names are "similar", otherwise returns false (1).
portmake_util_are_package_names_similar () {
	local basename_1=$(echo $1 | rev | cut -d - -f 2- | rev)
	local basename_2=$(echo $2 | rev | cut -d - -f 2- | rev)
	local buildtag_1=$(echo $1 | rev | cut -d - -f 1 | rev)
	local buildtag_2=$(echo $2 | rev | cut -d - -f 1 | rev)
	if [[ 	"$basename_1" = "$basename_2" && 
		"$buildtag_1" = "$BUILD_PREFIX"* && 
		"$buildtag_2" = "$BUILD_PREFIX"* ]];
	then
		return 0
	else
		return 1
	fi
}

# Utility function to increment the build number for the package file specified
# by $1 if it is necessary (i.e. if portmake_util_are_package_names_similar
# NEW_PACKAGE_NAME INSTALLED_PACKAGE_NAME evaluates to true). The package file
# specified must be in the current working directory. If autoincrementation is
# necessary, set the build number for the current package to the build number
# of the installed package plus 1.
portmake_util_autoincrement_build_if_necessary () {
	# Check if autoincrementation is enabled and stop if it's not
	if [ $AUTOINCREMENT_BUILD_NUMBER = false ]; then
		return
	fi

	# Strip the .t?z from the package file name
	local package_name=$(echo $1 | rev | cut -d . -f 2- | rev)
	local package_basename=$(echo $1 | rev | cut -d - -f 4- | rev)
	# Escape the package name for egrep
	local escaped_name=$(sed 's/[^[:alnum:]]/\\&/g' <<< "$package_basename")
	local installed_package_name=$(ls /var/log/packages | egrep '^'"$escaped_name"'-[^-]+-[^-]+-[^-]+$')

	# If the package is not installed, then we are done; no need to
	# autoincrement
	if [ -z "$installed_package_name" ]; then
		return
	# Otherwise, do the check and autoincrement if need be.
	elif portmake_util_are_package_names_similar "$package_name" "$installed_package_name"; then
		local original_tag=$(echo $installed_package_name | rev | cut -d - -f 1 | rev)
		local original_build_number=${original_tag:${#BUILD_PREFIX}}
		local new_build_number=$(expr $original_build_number + 1)
		local new_package_name="$(echo $package_name | rev | cut -d - -f 2- | rev)-${BUILD_PREFIX}${new_build_number}.$(echo $1 | rev | cut -d . -f 1 | rev)"
		mv "$1" "$new_package_name" || return 1
	fi
}

# Checks if this package is already installed. Evaluates to true and exists
# with status 0 if it is; otherwise it evaulates to false and exits with status
# 1.
portmake_check_installed () {
	if portmake_util_is_package_installed $package; then
		echo ${package} is installed.
		exit 0
	else
		echo ${package} is not installed.
		exit 1
	fi
}

# Utility function to check if a package has an update available without
# exiting the script. Returns true (0) if the package $1 has an update
# available, otherwise returns false (1).
portmake_util_check_update () {
	# Check if the package is installed
	local pkg_file=$(ls /var/log/packages | egrep '^'$1'-[^-]+-[^-]+-[^-]+$')
	if [ -z "$pkg_file" ]; then
		return 1
	fi

	# Check if an update is available
	local pkg_ports_dir=$(dirname $(find "$PORTS_TREE/" -name "$1.buildscript"))
	local changed_files=$(find "$pkg_ports_dir" -newer "/var/log/packages/$pkg_file" | egrep -v '.buildscript$')
	if [ -z "$changed_files" ]; then
		return 1
	else
		return 0
	fi

}

# Checks if this package needs to be updated. If any files in the package's
# source directory have been modified since the package was last built, this
# evaluates to true and exits with status 0.  Otherwise, it evaulates to false
# and exists with status 1.
portmake_check_update () {
	if ! portmake_util_is_package_installed $package; then
		echo ${package} is not installed.
		exit 1
	elif portmake_util_check_update $package; then
		echo ${package} has an update available.
		exit 0
	else
		echo ${package} does not have an update avaiable.
		exit 1
	fi
}

# Downloads the source tarballs for a package and verifies their integrity.
portmake_download () {
	portmake_download_only
	portmake_verify_only
}

# Download the source tarballs and stop; do not verify their integrity.
portmake_download_only () {
	echo -e ${COLOR_INFO}Downloading source for ${package}${COLOR_NORMAL}
	sudo -u $PRIVSEP_USER $package_dir/${package}.buildscript download || exit 2
}

# Download the source tarballs and stop; do not verify their integrity.
portmake_download_recursive () {
	portmake_download
	for dependency in $(eval $package_dir/${package}.buildscript builddeps);
	do
		echo $dependency
		eval $0 download-recursive $dependency || exit 2
	done
}

# Install the package like the install option, but only if it is not already
# installed.
portmake_install_new () {
	if ! portmake_util_is_package_installed $package; then
		portmake_install
	else
		echo $package is already installed, skipping build.
	fi
}

# Install the package by running build-recursive to build it, rebuilding the
# package if it is already installed. Additionally install all of its
# dependencies.
portmake_install () {
	portmake_build_recursive
	if [ ! -z "$(ls -A $OUTDIR)" ]; then
		upgradepkg --reinstall --install-new $OUTDIR/*.t?z || exit 5
	fi
}

# Update the package if it is already installed and check-update evaluates to
# true.
portmake_update () {
	if ! portmake_util_is_package_installed $package; then
		echo $package is not installed, skipping.
		exit 0
	elif ! portmake_util_check_update $package; then
		echo $package does not have an update avaiable.
		exit 0
	fi

	portmake_build
	if [ ! -z "$(ls -A $OUTDIR)" ]; then
		upgradepkg --reinstall --install-new $OUTDIR/*.t?z || exit 5
	fi
}

# Update every package in the ports tree as though it had \`portmake update\`
# run on it.	
portmake_update_all () {
	echo -e ${COLOR_INFO}Updating all packages${COLOR_NORMAL}
	echo -e "$(date --rfc-3339=seconds)\tUpdating all packages" >> $LOG_FILE

	#for buildscript in $(find "$PORTS_TREE/" -name "*.buildscript" | egrep -v "^$PORTS_TREE/utilities"); do
	for pkg in $(ls /var/log/packages | egrep "${BUILD_PREFIX}[^-]+$"); do
		local portname=$(echo $pkg | rev | cut -d - -f 4- | rev)
		eval $0 update $portname || exit 1
		local stat=$?
		if [ $stat -gt 1 ]; then
			echo -e ${COLOR_FAIL}Failed to update $portname${COLOR_NORMAL}
			echo -e "$(date --rfc-3339=seconds)\tFailed to update $portname" >> $LOG_FILE
			exit $stat
		fi
	done

	echo -e ${COLOR_PASS}Update completed successfully${COLOR_NORMAL}
	echo -e "$(date --rfc-3339=seconds)\tUpdate completed successfully" >> $LOG_FILE
}

# Verify the integrity of the source tarballs and stop.
portmake_verify_only () {
	echo -e ${COLOR_INFO}Verifying integrity of source for ${package}${COLOR_NORMAL}
	sudo -u $PRIVSEP_USER $package_dir/${package}.buildscript verify || exit 3
}

# Main function
main () {
	# Check arguments
	if [ $# -lt 1 ]; then
		echo "Usage: $0 <action> [package]"
		echo "Run \`$0 help\` for a list of supported actions"
		exit 1
	fi

	# Set the package variable to the package name and the package_dir
	# variable to the package's working directory.
	if [ $# -lt 2 ]; then
		package=$(echo *.buildscript | rev | cut -d . -f 2- | rev)
		package_dir=$(realpath $PWD)
	else
		package=$2
		for dir in ${ENABLED_REPOSITORIES[*]}; do
			package_dir=$(find "$PORTS_TREE/$dir" -maxdepth 2 -name $2 -type d)
			if [ ! -z "$package_dir" ]; then break; fi
		done
		if [ -z "$package_dir" ]; then
			echo -e "${COLOR_FAIL}Error: package $package does not exist in the ports tree${COLOR_NORMAL}"
			exit 1
		fi
	fi

	# Get the package group
	# I know this is a giant mess but it works. If you touch it you own it:)
	rev_package_dir=$(echo $package_dir | rev)
	package_group_len=$(echo $rev_package_dir | fgrep -b -o /strop/ | cut -d : -f 1)
	package_group=$(dirname $(echo ${rev_package_dir::$package_group_len} | rev) 2> /dev/null)

	# Set some variables
	OUTDIR=/tmp/portbuilds/$package  
	PKG_BUILD=${BUILD_PREFIX}${BUILD:-1}

	# Main switch
	case $1 in
		help)
			portmake_help
			;;
		build)
			portmake_build
			;;
		build-only)
			portmake_build_only
			;;
		build-recursive)
			portmake_build_recursive
			;;
		check-installed)
			portmake_check_installed
			;;
		check-update)
			portmake_check_update
			;;
		download)
			portmake_download
			;;
		download-only)
			portmake_download_only
			;;
		download-recursive)
			portmake_download_recursive
			;;
		install)
			portmake_install
			;;
		install-new)
			portmake_install_new
			;;
		update)
			portmake_update
			;;
		update-all)
			portmake_update_all
			;;
		verify-only)
			portmake_verify_only
			;;
		*)
			echo -e "${COLOR_FAIL}Error: Invalid action $1${COLOR_NORMAL}"
			echo "Run \`$0 help\` for a list of supported actions"
			exit 1
			;;
	esac
}

# Check that privsep user exists
if [ -z "$(id -u $PRIVSEP_USER 2> /dev/null)" ]; then
	cat << EOF 
Privilege separation user $PRIVSEP_USER does not exist. Either add the user or
edit /etc/portmake.conf to use a different user.
EOF
	exit 6
fi

# Check that portmake is being run as root. This is necessary or 
# `su $PRIVSEP_USER` will fail.
if [ $(id -u) -ne 0 ]; then
	cat << EOF
Portmake must be run as root. Portmake will automatically drop privileges when
possible.
EOF
	exit 6
fi

main $@
